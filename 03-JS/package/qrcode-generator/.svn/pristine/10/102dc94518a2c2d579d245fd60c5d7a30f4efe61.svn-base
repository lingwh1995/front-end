{"version":3,"file":"js/569.31fd36a6.js","mappings":"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","sources":["webpack://qrcode-generator-webui/./src/api/dict.js","webpack://qrcode-generator-webui/./src/commons/utils.js","webpack://qrcode-generator-webui/./src/views/Dict.vue","webpack://qrcode-generator-webui/./src/views/Dict.vue?d04d"],"sourcesContent":["import request from '../axios/request'\r\n\r\n/** 根据schemeId和level查询树结构 */\r\nexport function getDictsForTreeBySchemeIdAndLevelForCascader(params) {\r\n    return request({\r\n        url: `/dict/scheme_id/${params.schemeId}/level/${params.level}`,\r\n        method: 'GET',\r\n    })\r\n}\r\n\r\n/** 根据schemeId查询树结构 */\r\nexport function getDictsForTreeBySchemeIdForTree(conditions) {\r\n    return request({\r\n        url: `/dict/scheme_id/${conditions.schemeId}`,\r\n        method: 'GET',\r\n    })\r\n}\r\n\r\n/** 新增Dict */\r\nexport function addDict(dict) {\r\n    return request({\r\n        url: '/dict',\r\n        method: 'POST',\r\n        data: dict\r\n    })\r\n}\r\n\r\n/** 根据id删除Dict */\r\nexport function deleteDictByIdRecursive(id) {\r\n    return request({\r\n        url: `/dict/recursive/${id}`,\r\n        method: 'DELETE',\r\n    })\r\n}\r\n\r\n/** 根据dictCode查询parentId，根据parentId查询树结构 */\r\nexport function getDictsForSelectOptionsByParentIdFromSchemeIdAndDictCode(params) {\r\n    return request({\r\n        url: `/dict/scheme_id/${params.schemeId}/dict_code/${params.dictCode}`,\r\n        method: 'GET',\r\n    })\r\n}\r\n\r\n/** 更新Dict */\r\nexport function updateDict(dict) {\r\n    return request({\r\n        url: '/dict',\r\n        method: 'PUT',\r\n        data: dict\r\n    })\r\n}","//导入lodash的深克隆模块\r\nimport _, { cloneDeep } from 'lodash'\r\n\r\n/**\r\n * 使用lodash实现深拷贝\r\n * @param obj\r\n */\r\nexport const deepClone = (obj) => {\r\n    return _.cloneDeep(obj)\r\n}","<template>\r\n  <el-row>\r\n    <el-col :span=\"20\" style=\"padding-left: 20px;padding-right: 20px;padding-top: 20px;\">\r\n      <el-form-item label=\"选择方案\">\r\n        <el-select v-model=\"conditions.schemeId\" placeholder=\"请选择方案\" @change=\"handleSchemeOptionsChange\">\r\n          <el-option v-for=\"(schemeOption, index) in schemeOptions\" :key=\"index\" :label=\"schemeOption.label\"\r\n            :value=\"schemeOption.value\" />\r\n        </el-select>\r\n      </el-form-item>\r\n    </el-col>\r\n  </el-row>\r\n  <el-row style=\"padding-left: 20px;padding-right: 20px;\">\r\n    <el-col :span=\"20\">\r\n      <el-form-item label=\"字典数据\">\r\n        <div class=\"custom-tree-container\" style=\"height: 650px;overflow: scroll;\">\r\n          <el-tree :data=\"dictTreeData\"\r\n          :expand-on-click-node=\"false\"\r\n          :render-content=\"renderContent\"\r\n          node-key=\"id\"\r\n          :default-expanded-keys=\"[defaultExpandedKeys]\">\r\n          </el-tree>\r\n        </div>\r\n      </el-form-item>\r\n    </el-col>\r\n  </el-row>\r\n  <el-dialog v-model=\"addOrEditDictDialogTableVisible\" :title=\"addOrEditTreeDictDialogTitle\" width=\"500\">\r\n    <el-form :model=\"dict\">\r\n      <el-form-item label=\"请输入字典名称\" :label-width=\"formLabelWidth\">\r\n        <el-input v-model=\"dict.dictName\" autocomplete=\"off\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"请输入字典数据\" :label-width=\"formLabelWidth\">\r\n        <el-input v-model=\"dict.dictData\" autocomplete=\"off\" type=\"textarea\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"请输入字典描述\" :label-width=\"formLabelWidth\">\r\n        <el-input v-model=\"dict.dictDesc\" autocomplete=\"off\" type=\"textarea\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"请选择字典类型状态\" :label-width=\"formLabelWidth\">\r\n        <el-switch v-model=\"dict.dictStatus\" autocomplete=\"off\" />\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <div class=\"dialog-footer\">\r\n        <el-button @click=\"addOrEditDictDialogTableVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleAddDict\" v-if=\"addOrEditTreeDictOperateType == 'ADD'\">\r\n          保存\r\n        </el-button>\r\n        <el-button type=\"primary\" @click=\"handleUpdateDict\" v-if=\"addOrEditTreeDictOperateType == 'UPDATE'\">\r\n          更新\r\n        </el-button>\r\n      </div>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, reactive, watch } from 'vue'\r\nimport { getDictsForTreeBySchemeIdForTree, addDict, deleteDictByIdRecursive, updateDict } from '@/api/dict.js'\r\nimport { getSchemesForSelectInput } from '@/api/scheme.js'\r\n//弹出层插件\r\nimport { ElMessage } from \"element-plus\";\r\nimport { deepClone } from '@/commons/utils.js'\r\n\r\nexport default {\r\n  name: \"Dict\",\r\n  setup() {\r\n    //新增或编辑树节点Dialog的显示状态\r\n    const addOrEditDictDialogTableVisible = ref(false)\r\n    //编辑树形字典Dialog弹窗标题\r\n    const addOrEditTreeDictDialogTitle = ref('新增字典')\r\n    //操作类型\r\n    const addOrEditTreeDictOperateType = ref('ADD')\r\n\r\n    //定义字典类型模板\r\n    const DICT_TEMPLATE = {\r\n      id: null,\r\n      dictName: null,\r\n      dictCode: null,\r\n      dictData: null,\r\n      dictSort: null,\r\n      dictDesc: null,\r\n      dictStatus: true,\r\n      parentId: null,\r\n      level: null,\r\n      schemeId: null,\r\n    }\r\n    //根据模板创建Dict实体\r\n    const dict = reactive(deepClone(DICT_TEMPLATE))\r\n\r\n    //方案下拉框使用的数据\r\n    const schemeOptions = ref([]);\r\n\r\n    //查询条件\r\n    const conditions = reactive({\r\n      schemeId: null\r\n    })\r\n\r\n    //字典数据\r\n    const dictTreeData = ref([])\r\n    //默认展开的节点\r\n    const defaultExpandedKeys = ref([])\r\n\r\n    //从数据库查询方案下拉框需要的数据\r\n    const refreshSchemeList = async () => {\r\n      try {\r\n        //从数据库查询方案名称下拉框需要用到的数据\r\n        const getSchemesResponse = await getSchemesForSelectInput()\r\n        //获取到了所有的方案列表\r\n        const schemeList = getSchemesResponse.data.data\r\n        //根据全部的方案列表数据封装方案名称下拉框需要用到的数据\r\n        schemeList.forEach(scheme => {\r\n          schemeOptions.value.push({ label: scheme.schemeName, value: scheme.schemeId })\r\n        });\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    //刷新树\r\n    const refreshTree = async () => {\r\n      const getDictsForTreeBySchemeIdForTreeResponse = await getDictsForTreeBySchemeIdForTree(conditions)\r\n      if (getDictsForTreeBySchemeIdForTreeResponse.data.code == '200') {\r\n        dictTreeData.value = [getDictsForTreeBySchemeIdForTreeResponse.data.data]\r\n      } else {\r\n        ElMessage({\r\n          message: `根据方案加载树失败`,\r\n          type: \"error\",\r\n          plain: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    onMounted( () => {\r\n      refreshSchemeList()\r\n      //判断用户是否选择了方案，如果没有选择方案或者没有设置默认方案的话，直接结束代码的执行\r\n      if (conditions.schemeId == null) {\r\n        //TODO\r\n        return\r\n      }\r\n    })\r\n\r\n    //新增字典类型数据\r\n    const handleAddDict = async () => {\r\n      //关闭弹窗\r\n      addOrEditDictDialogTableVisible.value = false\r\n      //执行新增操作\r\n      const addDictResponse = await addDict(dict)\r\n      let addDictId = null\r\n      if(addDictResponse.data.code == '200') {\r\n        ElMessage({\r\n          message: `新增字典数据成功`,\r\n          type: \"success\",\r\n          plain: true,\r\n        });\r\n        addDictId = addDictResponse.data.data.id\r\n      }else {\r\n        ElMessage({\r\n          message: `新增字典数据失败`,\r\n          type: \"error\",\r\n          plain: true,\r\n        });\r\n      }\r\n\r\n      //刷新树\r\n      refreshTree()\r\n      //设置默认展开的节点\r\n      defaultExpandedKeys.value = addDictId\r\n    }\r\n\r\n    //更新字典类型数据\r\n    const handleUpdateDict = async () => {\r\n      //关闭弹窗\r\n      addOrEditDictDialogTableVisible.value = false\r\n      //执行更新操作\r\n      const updateDictResponse = await updateDict(dict)\r\n      let updateDictId = null\r\n      if(updateDictResponse.data.code == '200') {\r\n        ElMessage({\r\n          message: `更新字典数据成功`,\r\n          type: \"success\",\r\n          plain: true,\r\n        });\r\n        updateDictId = updateDictResponse.data.data.id\r\n      }else {\r\n        ElMessage({\r\n          message: `根新字典数据失败`,\r\n          type: \"error\",\r\n          plain: true,\r\n        });\r\n      }\r\n\r\n      //刷新树\r\n      refreshTree()\r\n      //设置默认展开的节点\r\n      defaultExpandedKeys.value = updateDictId\r\n    }\r\n\r\n    //新增节点\r\n    const appendNode = (data) => {\r\n      //打开弹窗\r\n      addOrEditDictDialogTableVisible.value = true\r\n      //修改弹窗标题\r\n      addOrEditTreeDictDialogTitle.value = '新增字典类型'\r\n      //修改操作类型\r\n      addOrEditTreeDictOperateType.value = 'ADD'\r\n\r\n      dict.dictSort = data.children == null ? 1 : data.children.length + 1\r\n      dict.parentId = data.id\r\n      //这个level要+1\r\n      dict.level = data.level + 1\r\n      dict.schemeId = conditions.schemeId\r\n    }\r\n\r\n    //编辑节点\r\n    const updateNode = (data) => {\r\n      //打开弹窗\r\n      addOrEditDictDialogTableVisible.value = true\r\n      //修改弹窗标题\r\n      addOrEditTreeDictDialogTitle.value = '编辑字典类型'\r\n      //修改操作类型\r\n      addOrEditTreeDictOperateType.value = 'UPDATE'\r\n\r\n      //根据模板创建一个dict对象\r\n      const dict_ = reactive(deepClone(DICT_TEMPLATE))\r\n      dict_.id = data.id\r\n      dict_.dictName = data.label\r\n      dict_.dictData = data.data\r\n      dict_.dictDesc = data.desc\r\n      dict_.dictStatus = data.status == '0' ? true :false\r\n      Object.keys(dict).forEach(key => {\r\n        dict[key] = dict_[key]\r\n      })\r\n    }\r\n\r\n    //删除节点\r\n    const removeNode = async (node, data) => {\r\n      const parent = node.parent\r\n      const children = parent.data.children || parent.data\r\n      const index = children.findIndex((d) => d.id === data.id)\r\n      children.splice(index, 1)\r\n      //根据id后台递归删除树节点\r\n      const deleteDictByIdRecursiveResponse = await deleteDictByIdRecursive(data.id)\r\n      if(deleteDictByIdRecursiveResponse.data.code == '200') {\r\n        ElMessage({\r\n          message: `删除节点${data.dictName}及子结点数据成功`,\r\n          type: \"success\",\r\n          plain: true,\r\n        });\r\n      }else {\r\n        ElMessage({\r\n          message: `删除节点${data.dictName}及子结点数据失败`,\r\n          type: \"error\",\r\n          plain: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    //渲染树\r\n    const renderContent = (h, { node, data, store }) => {\r\n      return h('span',\r\n         { class: 'custom-tree-node', },\r\n        h('span', { style: '' }, node.label),\r\n        h('span', null,\r\n          h(\r\n            'span',\r\n            {\r\n              style: 'display:inline-block;text-align:left;width:300px;',\r\n            },\r\n            data.data\r\n          ),\r\n          h(\r\n            'span',\r\n            {\r\n              style: 'display:inline-block;text-align:left;width:450px;',\r\n            },\r\n            data.desc\r\n          ),\r\n          h(\r\n            'a',\r\n            {\r\n              style: 'margin-right:10px;',\r\n              onClick: () => appendNode(data),\r\n            },\r\n            '增加节点 '\r\n          ),\r\n          h(\r\n            'a',\r\n            {\r\n              style: 'margin-right:10px;',\r\n              onClick: () => updateNode(data),\r\n            },\r\n            '编辑节点 '\r\n          ),\r\n          h(\r\n            'a',\r\n            {\r\n              style: '',\r\n              onClick: () => removeNode(node, data),\r\n            },\r\n            '删除节点'\r\n          )\r\n        )\r\n      )\r\n    }\r\n\r\n    //监听方案下拉列表的变化\r\n    const handleSchemeOptionsChange = async() => {\r\n      await refreshTree()\r\n      //设置默认展开的节点\r\n      defaultExpandedKeys.value = dictTreeData.value[0].id\r\n    }\r\n\r\n    //监听弹窗是否打开\r\n    watch(addOrEditDictDialogTableVisible, (newValue, oldValue) => {\r\n      //弹窗关闭，清空\r\n      if (!newValue) {\r\n        //根据模板创建一个dict对象\r\n        const dict_ = reactive(deepClone(DICT_TEMPLATE))\r\n        Object.keys(dict).forEach(key => {\r\n          dict[key] = dict_[key]\r\n        })\r\n      }\r\n    })\r\n    return {\r\n      dictTreeData,\r\n      renderContent,\r\n      addOrEditDictDialogTableVisible,\r\n      handleAddDict,\r\n      handleUpdateDict,\r\n      dict,\r\n      conditions,\r\n      handleSchemeOptionsChange,\r\n      schemeOptions,\r\n      addOrEditTreeDictDialogTitle,\r\n      addOrEditTreeDictOperateType,\r\n      defaultExpandedKeys\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 8px;\r\n  width: 100%;\r\n  font-weight:bold;\r\n  color: green;\r\n}\r\n\r\n.custom-tree-container {\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./Dict.vue?vue&type=template&id=2eee39ce\"\nimport script from \"./Dict.vue?vue&type=script&lang=js\"\nexport * from \"./Dict.vue?vue&type=script&lang=js\"\n\nimport \"./Dict.vue?vue&type=style&index=0&id=2eee39ce&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["getDictsForTreeBySchemeIdAndLevelForCascader","params","request","url","schemeId","level","method","getDictsForTreeBySchemeIdForTree","conditions","addDict","dict","data","deleteDictByIdRecursive","id","getDictsForSelectOptionsByParentIdFromSchemeIdAndDictCode","dictCode","updateDict","deepClone","obj","_","class","style","_createElementBlock","_Fragment","_createVNode","_component_el_row","default","_withCtx","_component_el_col","span","_component_el_form_item","label","_component_el_select","modelValue","$setup","_cache","$event","placeholder","onChange","handleSchemeOptionsChange","_renderList","schemeOptions","schemeOption","index","_createBlock","_component_el_option","key","value","_createElementVNode","_hoisted_1","_component_el_tree","dictTreeData","renderContent","defaultExpandedKeys","_component_el_dialog","addOrEditDictDialogTableVisible","title","addOrEditTreeDictDialogTitle","width","footer","_hoisted_2","_component_el_button","onClick","_createTextVNode","addOrEditTreeDictOperateType","type","handleAddDict","_createCommentVNode","handleUpdateDict","_component_el_form","model","_ctx","formLabelWidth","_component_el_input","dictName","autocomplete","dictData","dictDesc","_component_el_switch","dictStatus","name","setup","ref","DICT_TEMPLATE","dictSort","parentId","reactive","refreshSchemeList","async","getSchemesResponse","getSchemesForSelectInput","schemeList","forEach","scheme","push","schemeName","error","console","log","refreshTree","getDictsForTreeBySchemeIdForTreeResponse","code","ElMessage","message","plain","onMounted","addDictResponse","addDictId","updateDictResponse","updateDictId","appendNode","children","length","updateNode","dict_","desc","status","Object","keys","removeNode","node","parent","findIndex","d","splice","deleteDictByIdRecursiveResponse","h","store","watch","newValue","oldValue","__exports__","render"],"sourceRoot":""}